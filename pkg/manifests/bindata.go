// Code generated by go-bindata.
// sources:
// assets/pod-checkpointer-operator/cluster-role.yaml
// assets/pod-checkpointer-operator/custom-resource.yaml
// assets/pod-checkpointer-operator/daemonset.yaml
// assets/pod-checkpointer-operator/namespace.yaml
// assets/pod-checkpointer-operator/rbac.yaml
// assets/pod-checkpointer-operator/role-binding.yaml
// assets/pod-checkpointer-operator/service-account.yaml
// manifests/00-namespace.yaml.disabled
// manifests/01-crd.yaml
// manifests/02-cr.yaml
// manifests/02-rbac.yaml
// manifests/02-service-account.yaml
// manifests/03-role-binding.yaml
// manifests/04-deployment.yaml
// manifests/image-references
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPodCheckpointerOperatorClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\x0a\x02\x31\x0c\x45\xf7\x3d\x45\xc9\x7e\x2a\xb3\xed\xd6\x03\xe8\xca\x7d\x68\x23\x0d\xe3\x24\xa1\x0d\x9e\x5f\xd4\x41\x0a\xee\x3e\xbc\xff\x78\x68\x7c\xa3\x3e\x58\x25\x47\x30\xad\xa9\x34\x2a\x9b\x29\x8b\x53\x4f\x6a\xd4\xd1\xf5\x33\x64\x34\xbe\x7b\x62\x3d\x3d\x57\x7c\x58\xc3\x15\xc2\xc6\x52\x73\x84\xab\xd6\xf3\xa4\x5d\x0e\x0b\xc2\x4e\x8e\x15\x1d\x73\x88\x51\x70\xa7\x6f\x63\x99\x1b\x70\xa0\x61\x58\xde\xfc\x57\x5a\xfe\x9f\xaf\x00\x00\x00\xff\xff\x9a\xcf\x6b\xd9\xad\x00\x00\x00")

func assetsPodCheckpointerOperatorClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorClusterRoleYaml,
		"assets/pod-checkpointer-operator/cluster-role.yaml",
	)
}

func assetsPodCheckpointerOperatorClusterRoleYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/cluster-role.yaml", size: 173, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorCustomResourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\xec\x30\x0c\x45\xf7\xf9\x0a\xff\xc0\xe4\xa9\xbb\xa7\x6c\x87\x1d\x08\x10\x0b\xf6\x26\xf1\x4c\xad\xb6\xb1\x15\xbb\x15\x9f\x8f\x5a\xa6\xa8\x9b\x41\x62\x97\xe8\x9e\x63\xeb\x26\xa8\xfc\x4e\xcd\x58\x6a\x02\x54\xa6\x4f\xa7\xba\xde\x2c\x0e\xff\x2d\xb2\xfc\x5b\xba\x0f\x72\xec\xc2\xc0\xb5\x24\x38\xcf\xe6\x32\xbd\x91\xc9\xdc\x32\x3d\xd0\x85\x2b\x3b\x4b\x0d\x13\x39\x16\x74\x4c\x01\xa0\xe2\x44\x09\x54\x4a\xee\x29\x0f\x2a\x5c\x9d\x9a\x28\x35\x74\x69\x16\x55\x4a\x3c\x26\x71\x8f\xd6\x43\xb5\x9e\x2f\x1e\x59\x6e\x73\x4c\x31\x53\x82\x9f\xe4\xa4\x52\x4e\x47\x3b\x98\x52\x5e\xb7\x5e\x9b\xcc\xba\xad\xfd\xc3\xf4\x55\x04\xf8\xee\xf6\x2a\xe5\x7c\x10\x5f\x6e\xde\x46\x8c\x6c\xfe\xf8\x1b\xf5\xc4\xe6\x1b\xa9\xe3\xdc\x70\xbc\x5f\x7f\x83\x8c\xeb\x75\x1e\xb1\xdd\xc5\x02\x80\x65\x51\x4a\xf0\xbc\x3f\x42\x09\x00\xcb\xfe\x55\x4b\x87\xa3\xf6\xd8\x85\xaf\x00\x00\x00\xff\xff\xbe\x41\xb3\x79\xc0\x01\x00\x00")

func assetsPodCheckpointerOperatorCustomResourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorCustomResourceYaml,
		"assets/pod-checkpointer-operator/custom-resource.yaml",
	)
}

func assetsPodCheckpointerOperatorCustomResourceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorCustomResourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/custom-resource.yaml", size: 448, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xcf\x6f\xf2\x38\x10\xbd\xf3\x57\x58\xdc\x9d\xa8\x87\x95\x56\x96\x7a\x40\xdb\xee\x69\x4b\x51\x51\xf7\xfa\x69\xea\x0c\x60\x61\x7b\x2c\x7b\x92\x96\xff\xfe\x93\x81\x7c\x38\x21\x94\x53\x73\x8a\xe6\xcd\x7b\xcf\xf3\xc3\x86\x60\xfe\xc7\x98\x0c\x79\x25\x20\x84\x54\x77\x0f\xb3\xbd\xf1\x8d\x12\x4f\x80\x8e\xfc\x1a\x79\xe6\x90\xa1\x01\x06\x35\x13\xc2\xc2\x07\xda\x94\xff\x84\xd8\xff\x9d\x24\x84\xa0\x44\xa0\x46\xea\x1d\xea\x7d\x20\xe3\x19\xe3\x4c\x08\x0f\x0e\x6f\x02\x29\x80\x46\x25\xf6\xed\x07\xca\x74\x48\x8c\x6e\x96\x02\xea\xac\x9a\xd0\xa2\x66\x8a\x27\x07\x07\xac\x77\xff\x15\x96\xdf\x9b\x32\xba\x60\x81\xf1\x4c\x2e\x8e\x9d\x3f\x3b\xd0\xf9\x5e\x29\x7f\xe0\x3d\x31\xb0\x21\x5f\x90\xca\xbc\x0a\x6c\xd8\x41\xa5\x29\x22\xa5\x4a\x93\xab\x2f\xa8\x12\x73\x8e\x2d\xce\x8f\xc4\xbe\xb8\xa3\x00\x79\x06\xe3\x31\x16\xa2\xf2\x76\xbb\xfe\xf8\x92\x73\xe0\x1b\x55\x84\x32\xaf\x70\x1c\x21\x52\x5a\xd2\x7b\xb9\x31\x16\x1f\xeb\x0e\x62\x1d\x5b\x5f\xe7\x50\x3d\x76\xa9\x72\xf4\x8a\x9d\x87\xa3\xc9\x6f\xcc\xf6\xb1\x46\xd6\x75\xc9\xa8\x2f\xe0\x15\xef\x92\x27\xb7\x11\x34\xca\x80\xd1\x50\xf3\xf8\x97\x2b\x52\xd1\x77\xe3\x4a\x4e\x1d\x58\xbe\x3e\x3d\xff\x5a\x2e\x5e\x9e\x07\xa8\x10\x1d\xd8\x16\xff\x8d\xe4\xd4\x08\x10\x62\x63\xd0\x36\x6f\xb8\xb9\x46\xce\xd8\x0a\x78\xa7\x8e\x33\xa8\x3c\x35\xb8\x04\x87\x93\xde\xab\xd7\xa7\x9f\xb1\xee\x17\xb1\xf2\xf7\xac\xd7\xab\xc5\x3f\x3f\xec\x7f\xbc\x7b\x45\xbe\x71\xb0\xc5\x55\x6b\xed\x8a\xac\xd1\x07\x25\x16\xf6\x13\x0e\xa9\xc8\xe8\xc8\xb6\x0e\x5f\xa8\xf5\x9c\xc6\x53\x73\x39\x7a\x72\xb9\xda\x92\xd1\xa1\x4e\x95\xde\xdc\x9c\xb1\x52\x4e\x8c\x1e\x19\xd3\xa4\x0e\xb2\x96\x37\x52\x86\x5a\xe7\xd5\x9f\x14\xe9\x20\xca\x0b\x96\x30\x76\x46\xe3\x42\xeb\x4c\x5f\x4e\xde\x48\x49\x01\x23\x30\xf5\xc5\xed\x28\xf1\x12\xf9\x93\xe2\x5e\x89\x7c\xe1\xcf\xf1\xbc\x68\xeb\xc1\x53\xd6\x47\x65\x24\x8b\xd5\xe5\xe8\x95\xa1\xda\x41\x62\x8c\x4a\xcc\xe7\xe7\xd4\x88\x89\x21\xf2\xe4\x48\x98\x6c\x3e\xc2\xf0\x59\x92\x62\x8f\x07\x75\xc7\xa0\xe8\x41\x5f\x86\x12\xcf\x5f\x26\x71\xd9\x40\xdc\x6c\x50\xb3\x12\x4b\x5a\xeb\x1d\x36\xad\xed\x6b\x3a\xed\xc1\xc4\xb3\x35\x39\xd3\x53\xe0\x05\xc2\x70\x65\xc6\x0c\x69\xbc\xd4\xb6\x1d\x1c\x4f\xde\x9b\x71\xee\xfa\x71\xbc\x03\xe9\xf0\xed\xf2\xc8\xc9\x99\xdf\x55\xbb\xac\x4f\x1b\x1a\x60\x5c\x73\x04\xc6\xed\xe1\x94\x1c\xc9\x5a\xe3\xb7\xef\x47\xa8\xe7\x3b\xf8\x7a\xf7\xd0\x81\xb1\xf0\x61\x51\x89\x87\x63\x9c\x0f\x01\x95\x78\x2b\x09\xb3\xdf\x01\x00\x00\xff\xff\xe1\x95\x3c\xb7\x7d\x07\x00\x00")

func assetsPodCheckpointerOperatorDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorDaemonsetYaml,
		"assets/pod-checkpointer-operator/daemonset.yaml",
	)
}

func assetsPodCheckpointerOperatorDaemonsetYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/daemonset.yaml", size: 1917, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x44\x21\x08\x06\xe0\x9e\x29\x58\xc0\xe2\x5a\x86\xb8\xf2\x7a\xa2\xff\x45\x62\x04\xa2\xe4\xcd\xff\xbe\x65\x3e\x84\xbf\xba\x71\x53\x3b\x48\xd3\x7e\x38\xd7\xc2\x85\x9f\x0f\x6d\x94\x0e\x2d\x15\x62\x76\xdd\x10\x8e\x84\xdf\x69\xff\x6a\x19\xa3\xf5\x89\xbe\x32\xcc\x0b\x87\xde\x00\x00\x00\xff\xff\xb1\x50\xa5\x46\x4c\x00\x00\x00")

func assetsPodCheckpointerOperatorNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorNamespaceYaml,
		"assets/pod-checkpointer-operator/namespace.yaml",
	)
}

func assetsPodCheckpointerOperatorNamespaceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/namespace.yaml", size: 76, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\x03\x31\x0c\x44\xef\xfe\x0a\xb3\xc7\xc2\xba\xe4\x56\xf6\x07\x7a\xef\xa1\x77\xc5\x9e\x34\x22\xb6\x25\x64\xef\x42\xfb\xf5\x25\x9b\x4d\x08\x49\xa1\x37\x8f\x35\xf3\x34\xe8\xc4\x35\x4d\xfe\x43\x32\x1c\x29\x7f\xc2\x1a\x4b\x9d\xbc\xed\x29\x06\x9a\xfb\x51\x8c\x7f\xa8\xb3\xd4\x70\x7a\x6b\x81\xe5\x75\xd9\xed\xd1\x69\xe7\x0a\x3a\x25\xea\x34\x39\xef\x2b\x15\x4c\x5e\x25\x8d\xf1\x88\x78\x52\xe1\xda\x61\xa3\x28\x8c\xba\xd8\xe6\x68\x4a\x11\x93\x17\x45\x6d\x47\x3e\xf4\xf1\x31\xe0\x6c\xce\x68\x93\x1b\x3d\x29\xbf\x9b\xcc\xda\xce\xf4\xf1\x4c\x0e\xf7\xc6\x70\x25\x87\x1b\x2c\xb0\x38\xef\x0d\x4d\x66\x8b\xd8\x72\xc3\xcb\xe0\xbc\x5f\x60\xfb\xbb\x8f\x27\xfa\x30\x3c\x27\x55\x52\x5b\x1f\x0d\xb6\x70\xc4\x45\xa0\xa6\xb5\xc1\x45\xe9\xf9\x58\xad\xa3\xf6\x45\xf2\x5c\x10\x33\x71\xd9\x8c\x0b\xae\xae\x28\xf5\xc0\x5f\x85\xf4\xca\x8b\x86\x75\xf4\x5f\x2d\xd2\x35\xf2\x50\x2c\x41\xb3\x7c\x97\x1b\x3e\x11\x8a\xd4\x86\x4d\x1a\x34\x73\xa4\x9b\x6e\x9d\x3a\x0e\x73\x6e\x7f\xee\xfc\x0d\x00\x00\xff\xff\x17\x48\xf7\x00\xfd\x01\x00\x00")

func assetsPodCheckpointerOperatorRbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRbacYaml,
		"assets/pod-checkpointer-operator/rbac.yaml",
	)
}

func assetsPodCheckpointerOperatorRbacYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/rbac.yaml", size: 509, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x4e\xc5\x30\x0c\x46\xf7\x3c\x45\x5e\x20\x45\x77\x43\xd9\x60\x61\xbf\x48\xec\xae\xe3\x52\xd3\xd6\xb6\x1c\xa7\x03\x4f\x8f\x10\x48\x48\x0c\x88\xe1\xee\xdf\xcf\xd1\xd9\x58\x5a\xcd\x57\xdd\xe9\x91\xa5\xb1\xbc\x26\x30\x7e\x21\xef\xac\x52\xb3\xcf\x80\x13\x8c\x58\xd5\xf9\x1d\x82\x55\xa6\xed\xbe\x4f\xac\x77\xe7\x65\xa6\x80\x4b\x3a\x28\xa0\x41\x40\x4d\x39\x0b\x1c\x54\xb3\x69\x2b\xb8\x12\x6e\xa6\x2c\x41\x5e\xd4\xc8\x21\xd4\xbf\x13\xdd\x00\xa9\x66\x35\x92\xbe\xf2\x12\xe5\x77\x21\xf5\x31\xbf\x11\x46\xaf\xa9\xe4\x2f\xbe\x67\xf2\x93\x91\x1e\x10\x75\x48\xdc\xf0\xca\x75\xa7\x2b\x2d\x9f\xf4\x3f\x26\xfe\xb5\x0f\xc6\x4f\xae\xc3\xfe\x90\x94\x3e\x02\x00\x00\xff\xff\x74\x58\x0e\xcb\x5d\x01\x00\x00")

func assetsPodCheckpointerOperatorRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRoleBindingYaml,
		"assets/pod-checkpointer-operator/role-binding.yaml",
	)
}

func assetsPodCheckpointerOperatorRoleBindingYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/role-binding.yaml", size: 349, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\xb1\x8d\x03\x41\x08\x05\xd0\x7c\xaa\xa0\x81\x09\x2e\x25\xbb\x1a\x2c\x39\x47\xcc\xb7\x16\xad\x16\x10\x83\xb7\x7e\x27\x8e\x9c\xbf\x27\x69\x4f\xd4\xb6\x70\xa6\xfb\x6f\x9c\xe6\x8b\xe9\x81\xba\x4d\xf1\xaf\x1a\x6f\xef\x71\xa1\x65\x49\x0b\x0f\x22\x97\x0b\x4c\x19\x6b\xea\x01\x3d\x33\xcc\x1b\x35\x23\x51\xd2\x51\x5f\xb1\x53\x14\x4c\x91\xf0\x7d\xd8\xab\xe7\x6f\x18\x9f\x00\x00\x00\xff\xff\x5e\xfd\x28\x03\x78\x00\x00\x00")

func assetsPodCheckpointerOperatorServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorServiceAccountYaml,
		"assets/pod-checkpointer-operator/service-account.yaml",
	)
}

func assetsPodCheckpointerOperatorServiceAccountYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/service-account.yaml", size: 120, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests00NamespaceYamlDisabled = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x44\x21\x08\x06\xe0\x9e\x29\x58\xc0\xe2\x5a\x86\xb8\xf2\x7a\xa2\xff\x45\x62\x04\xa2\xe4\xcd\xff\xbe\x65\x3e\x84\xbf\xba\x71\x53\x3b\x48\xd3\x7e\x38\xd7\xc2\x85\x9f\x0f\x6d\x94\x0e\x2d\x15\x62\x76\xdd\x10\x8e\x84\xdf\x69\xff\x6a\x19\xa3\xf5\x89\xbe\x32\xcc\x0b\x87\xde\x00\x00\x00\xff\xff\xb1\x50\xa5\x46\x4c\x00\x00\x00")

func manifests00NamespaceYamlDisabledBytes() ([]byte, error) {
	return bindataRead(
		_manifests00NamespaceYamlDisabled,
		"manifests/00-namespace.yaml.disabled",
	)
}

func manifests00NamespaceYamlDisabled() (*asset, error) {
	bytes, err := manifests00NamespaceYamlDisabledBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/00-namespace.yaml.disabled", size: 76, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests01CrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xb1\x6e\xf3\x30\x0c\x84\x77\x3d\x05\x5f\xe0\xd7\x0f\x6f\x85\xd6\x74\x6b\xd1\x16\x1d\xba\x33\x12\x93\x10\xb6\x45\x42\xa4\x8c\xf6\xed\x0b\xbb\x31\x90\x25\x05\xba\x49\xb8\xef\xee\x70\x20\x2a\x7f\x50\x33\x96\x9a\x00\x95\xe9\xd3\xa9\xae\x3f\x8b\xe3\x83\x45\x96\xff\xcb\x70\x24\xc7\x21\x8c\x5c\x4b\x82\x43\x37\x97\xf9\x9d\x4c\x7a\xcb\xf4\x48\x27\xae\xec\x2c\x35\xcc\xe4\x58\xd0\x31\x05\x80\x8a\x33\x25\x50\x29\xf9\x42\x79\x54\xe1\xea\xd4\x44\xa9\xa1\x4b\xb3\xa8\x52\xe2\xad\x12\x77\x69\x7d\x54\xbb\xf0\xc9\x23\xcb\x35\xc7\x14\x33\x25\x18\xfb\x91\xfe\xd9\x97\x39\xcd\xc1\x94\xf2\x5a\x73\x6e\xd2\x75\xeb\xf9\x43\xdc\x6a\x04\xf8\x19\xf3\x26\xe5\x70\x63\x7c\xbd\xfa\x36\x62\x62\xf3\xa7\xdf\xa8\x67\x36\xdf\x48\x9d\x7a\xc3\xe9\xfe\xde\x0d\x32\xae\xe7\x3e\x61\xbb\x8b\x05\x00\xcb\xa2\x94\xe0\x65\x5f\x5d\x02\xc0\xb2\xdf\x66\x19\x70\xd2\x0b\x0e\xe1\x3b\x00\x00\xff\xff\x6f\xeb\xb6\x71\xb1\x01\x00\x00")

func manifests01CrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests01CrdYaml,
		"manifests/01-crd.yaml",
	)
}

func manifests01CrdYaml() (*asset, error) {
	bytes, err := manifests01CrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/01-crd.yaml", size: 433, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02CrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8d\xb1\x0e\x02\x21\x0c\x40\x77\xbe\x82\x74\x3f\xcc\xad\xac\x7e\x80\x4e\xee\x15\x6a\x68\x10\xda\x40\x35\xf1\xef\x8d\xde\x0d\xb7\xbd\xe4\xe5\xe5\xa1\xf2\x8d\xc6\x64\xe9\xd1\x83\x4a\x0e\xa9\x50\xaa\x2a\xdc\x8d\x46\x10\xa5\x81\x26\x7f\xe8\xb3\xf0\xc3\x02\xcb\xe9\xbd\xe2\x53\x0b\xae\xe0\x2a\xf7\x1c\x3d\x5c\x25\x9f\x0f\xd9\x65\xaf\xc0\x35\x32\xcc\x68\x18\x9d\xf7\x1d\x1b\x6d\x8f\xe5\xf8\x80\x5d\x4d\xc5\xf4\xf3\xf5\x75\xa7\x65\x7e\xa6\x51\x03\xf7\x0d\x00\x00\xff\xff\x25\xb4\xab\x8b\x9e\x00\x00\x00")

func manifests02CrYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02CrYaml,
		"manifests/02-cr.yaml",
	)
}

func manifests02CrYaml() (*asset, error) {
	bytes, err := manifests02CrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-cr.yaml", size: 158, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02RbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xf4\x30\x0c\x84\xef\x79\x0a\x93\xe3\x0f\xce\xcf\xde\x4a\x5e\xa0\xf7\x1e\x7a\x57\xec\xd9\xae\x48\x6c\x19\xc9\x09\x6c\x9f\xbe\x24\x6c\x77\x0d\xdd\x42\x7d\x92\x86\xd1\x37\x92\xbd\xf7\xdd\xcc\x39\x8e\xee\x4d\x16\x74\x54\xf8\x1d\x6a\x2c\x79\x74\x3a\x51\x18\x68\xad\x17\x51\xfe\xa4\xca\x92\x87\xf9\xc5\x06\x96\xff\xdb\x69\x42\xa5\x53\x97\x50\x29\x52\xa5\xb1\x73\x2e\x53\xc2\xe8\x8a\x44\x1f\x2e\x08\x73\x11\xce\x15\xea\xa5\x40\xa9\x8a\xde\x1c\x56\x28\x60\x74\xf3\x3a\xc1\xdb\xd5\x2a\x52\xa7\xeb\x02\xdb\x09\xde\x51\xe1\x57\x95\xb5\x1c\xed\xfe\xfc\x0e\x1c\x5a\xe0\xf0\x0d\xdc\x8b\x6c\x17\x3e\xd7\x81\xe5\xb0\x2b\x4c\x56\x0d\x68\xa6\xfb\x7f\xfd\x51\x6f\xd0\xe9\x87\xfc\x34\xaf\xef\x7f\x63\x15\x89\x76\x6f\x0c\xba\x71\xc0\x43\x40\x8e\xc7\x86\x0f\xa5\xec\xff\x68\x15\xb9\x6e\xb2\xac\x09\x61\x21\x4e\xcd\xc0\x86\xd6\x1d\x24\x9f\xf9\x23\x51\x69\x33\x82\xe2\x66\xf9\xfb\x01\x54\x6e\x88\x27\x27\x44\x42\x92\x6c\x68\x72\x23\xca\x22\xd7\x74\xdf\xe5\x49\xd0\x57\x00\x00\x00\xff\xff\xa2\x53\xb7\xca\x23\x02\x00\x00")

func manifests02RbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02RbacYaml,
		"manifests/02-rbac.yaml",
	)
}

func manifests02RbacYaml() (*asset, error) {
	bytes, err := manifests02RbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-rbac.yaml", size: 547, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\xb1\x8d\x43\x31\x08\x06\xe0\xde\x53\xb0\x80\x8b\x6b\xdd\xdd\x0c\x91\xd2\x13\xfc\x4b\x41\x96\x01\x61\xde\x93\xb2\x7d\x9a\xd4\x1f\x87\x3e\x91\x47\xdd\x06\xdd\x7f\x6d\xa9\xcd\x41\x0f\xe4\xad\x82\x7f\x11\xbf\xac\xda\x46\xf1\xe4\xe2\xd1\x88\x8c\x37\x4e\xb0\x60\xd0\xba\x5e\xe8\xe7\x73\x0a\xfb\x07\x83\xc2\x67\x97\x37\x64\x85\xab\x15\xb2\x7b\x20\xb9\x3c\xdb\x37\x00\x00\xff\xff\xa3\x43\x57\x4b\x69\x00\x00\x00")

func manifests02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests02ServiceAccountYaml,
		"manifests/02-service-account.yaml",
	)
}

func manifests02ServiceAccountYaml() (*asset, error) {
	bytes, err := manifests02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/02-service-account.yaml", size: 105, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests03RoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x4e\x03\x41\x0c\x45\xfb\x39\x85\x2f\xb0\x8b\xd2\xa1\xe9\xa0\xa1\x0f\x12\xbd\xd7\xfb\x21\x66\xb3\xf6\xc8\xe3\x89\x04\xa7\x47\x11\x48\x54\xa0\xf4\xd6\x7b\xcf\x7f\x53\x5b\x2b\x1d\xfd\x8c\x47\xb5\x55\xed\xad\x70\xd3\x17\x44\x57\xb7\x4a\xb1\xb0\xcc\x3c\xf2\xe4\xa1\x9f\x9c\xea\x36\x6f\xf7\x7d\x56\xbf\xbb\x1c\x16\x24\x1f\xca\x8e\xe4\x95\x93\x6b\x21\x32\xde\x51\xa9\xf9\x3a\xc9\x09\xb2\x35\x57\x4b\xc4\xe4\x0d\xc1\xe9\xf1\x73\xd1\x1b\x0b\x2a\x6d\x63\xc1\xd4\x3f\x7a\x62\x2f\x7d\x2c\xef\x90\xec\x57\xc8\x44\xdf\x49\xcf\x88\x8b\x0a\x1e\x44\x7c\x58\x16\xa2\x5b\xf8\x7f\x1a\xc2\xcf\x38\xe2\xf5\x2a\xf8\xfd\xf8\xa6\x64\x6e\xfa\x14\x3e\xda\x3f\x63\x94\xaf\x00\x00\x00\xff\xff\x26\x17\x4c\xba\x45\x01\x00\x00")

func manifests03RoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests03RoleBindingYaml,
		"manifests/03-role-binding.yaml",
	)
}

func manifests03RoleBindingYaml() (*asset, error) {
	bytes, err := manifests03RoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/03-role-binding.yaml", size: 325, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests04DeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\x31\x8f\xdb\x30\x0c\x85\x77\xff\x0a\xe2\x76\x3b\xbe\x0e\x1d\xb4\x19\xd7\x14\x1d\xda\x3b\x23\x3d\xb4\x63\xc0\xc8\x4c\x2d\x44\x12\x55\x89\x76\xe1\x7f\x5f\x24\x71\x02\xc7\x97\x00\xd6\x24\xe8\x51\xef\x7d\x24\x88\xc1\xfc\xa2\x98\x0c\x7b\x05\x18\x42\x5a\xf5\xcf\xd9\xc1\xf8\x46\xc1\x17\x0a\x96\x07\x47\x5e\x32\x47\x82\x0d\x0a\xaa\x0c\xc0\xa3\x23\x05\x81\x9b\x5c\xb7\xa4\x0f\x81\x8d\x17\x8a\x39\x07\x8a\x28\x1c\xc7\x8a\x14\x50\x93\x82\x43\xb7\xa3\x3c\x0d\x49\xc8\x65\x29\x90\x3e\x1a\x44\x0a\xd6\x68\x4c\x0a\x9e\x33\x80\x44\x96\xb4\x70\x3c\x2a\x00\x0e\x45\xb7\xdf\x71\x47\x36\x9d\x1f\x96\xe4\x5d\xaa\xc6\x4c\x0e\xe4\x53\x6b\xf6\x92\xcf\x3f\x65\x00\x42\x2e\x58\x14\x1a\xe3\x26\x7d\x1d\x8f\xbd\x49\x5e\x9a\xbd\x3c\x1d\xe0\x32\x84\xd3\x9d\x62\x6f\x34\x55\x5a\x73\xe7\xe5\x75\x51\x96\x66\x2f\x68\x3c\xc5\x09\x65\xbe\x98\x13\xc0\x38\xfc\x43\x0a\xfe\x76\x38\x14\x86\x57\x71\x40\xbf\x0d\xad\xb1\xd6\x84\xb4\x7a\x68\xa0\xfa\xb2\x28\x8b\x4f\x13\x9f\xc0\x51\x26\x08\x67\x8c\x2b\x5c\xcd\x51\x14\x7c\x2e\xcb\xb2\xbc\x29\xb9\x4c\xd4\x91\x44\xa3\xd3\x44\xd3\xec\x1c\xfa\x66\xee\xb8\xb8\xa5\xba\xb3\xb6\x66\x6b\xf4\xa0\xa0\xb2\xff\x70\x98\x9a\x93\xef\xe7\xc6\x67\x8e\xdf\xd5\xfb\xcb\xb7\xed\x6b\xf5\x63\xfd\xb3\xae\x5e\xd6\x33\xd6\x1e\x6d\x47\x5f\x23\x3b\x35\x13\x00\xf6\x86\x6c\xb3\xa1\xfd\x47\x65\xd4\x6a\x94\x56\x5d\xf7\xab\xb8\x2e\xc8\x5d\x8c\xb7\x7a\xbd\xa9\xde\xdf\x36\x27\x92\x7b\x10\x0a\x9e\x1e\x4e\xe2\x29\xfb\x1f\x00\x00\xff\xff\x54\x80\x6a\xbe\xc3\x03\x00\x00")

func manifests04DeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests04DeploymentYaml,
		"manifests/04-deployment.yaml",
	)
}

func manifests04DeploymentYaml() (*asset, error) {
	bytes, err := manifests04DeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/04-deployment.yaml", size: 963, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsImageReferences = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xb1\xca\xc3\x30\x0c\x84\x77\x3f\xc5\xe1\x3d\x09\xff\xea\xf9\x5f\x3a\x17\xba\x0b\x47\x49\x44\x6a\xcb\xc8\xa2\xcf\x5f\x92\x94\x6e\x9d\xee\xb8\x83\xef\xdb\xa5\xce\x09\xb7\x42\x2b\xdf\xdd\x98\x4a\xa0\x26\x0f\xb6\x2e\x5a\x13\xe4\xd8\x47\x6d\x5c\xfb\x26\x8b\x8f\xa2\xd3\xeb\x2f\xf4\xc6\x39\x05\xc0\x69\xed\x47\x0e\xa8\x54\x38\xa1\xe9\x3c\xe4\x8d\xf3\xde\x54\xaa\xb3\x0d\xda\xd8\xc8\xd5\x02\x00\x2c\xa6\x25\x9d\x0d\xb8\xac\xf1\x5f\xf3\xce\x76\xca\xe3\xe7\xb9\x48\xf1\xab\x9c\x7e\x42\xd3\x93\x9c\xbb\xc7\xf0\x0e\x00\x00\xff\xff\xc4\xbd\x7f\x85\xc3\x00\x00\x00")

func manifestsImageReferencesBytes() ([]byte, error) {
	return bindataRead(
		_manifestsImageReferences,
		"manifests/image-references",
	)
}

func manifestsImageReferences() (*asset, error) {
	bytes, err := manifestsImageReferencesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/image-references", size: 195, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/pod-checkpointer-operator/cluster-role.yaml": assetsPodCheckpointerOperatorClusterRoleYaml,
	"assets/pod-checkpointer-operator/custom-resource.yaml": assetsPodCheckpointerOperatorCustomResourceYaml,
	"assets/pod-checkpointer-operator/daemonset.yaml": assetsPodCheckpointerOperatorDaemonsetYaml,
	"assets/pod-checkpointer-operator/namespace.yaml": assetsPodCheckpointerOperatorNamespaceYaml,
	"assets/pod-checkpointer-operator/rbac.yaml": assetsPodCheckpointerOperatorRbacYaml,
	"assets/pod-checkpointer-operator/role-binding.yaml": assetsPodCheckpointerOperatorRoleBindingYaml,
	"assets/pod-checkpointer-operator/service-account.yaml": assetsPodCheckpointerOperatorServiceAccountYaml,
	"manifests/00-namespace.yaml.disabled": manifests00NamespaceYamlDisabled,
	"manifests/01-crd.yaml": manifests01CrdYaml,
	"manifests/02-cr.yaml": manifests02CrYaml,
	"manifests/02-rbac.yaml": manifests02RbacYaml,
	"manifests/02-service-account.yaml": manifests02ServiceAccountYaml,
	"manifests/03-role-binding.yaml": manifests03RoleBindingYaml,
	"manifests/04-deployment.yaml": manifests04DeploymentYaml,
	"manifests/image-references": manifestsImageReferences,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"pod-checkpointer-operator": &bintree{nil, map[string]*bintree{
			"cluster-role.yaml": &bintree{assetsPodCheckpointerOperatorClusterRoleYaml, map[string]*bintree{}},
			"custom-resource.yaml": &bintree{assetsPodCheckpointerOperatorCustomResourceYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsPodCheckpointerOperatorDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsPodCheckpointerOperatorNamespaceYaml, map[string]*bintree{}},
			"rbac.yaml": &bintree{assetsPodCheckpointerOperatorRbacYaml, map[string]*bintree{}},
			"role-binding.yaml": &bintree{assetsPodCheckpointerOperatorRoleBindingYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsPodCheckpointerOperatorServiceAccountYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": &bintree{nil, map[string]*bintree{
		"00-namespace.yaml.disabled": &bintree{manifests00NamespaceYamlDisabled, map[string]*bintree{}},
		"01-crd.yaml": &bintree{manifests01CrdYaml, map[string]*bintree{}},
		"02-cr.yaml": &bintree{manifests02CrYaml, map[string]*bintree{}},
		"02-rbac.yaml": &bintree{manifests02RbacYaml, map[string]*bintree{}},
		"02-service-account.yaml": &bintree{manifests02ServiceAccountYaml, map[string]*bintree{}},
		"03-role-binding.yaml": &bintree{manifests03RoleBindingYaml, map[string]*bintree{}},
		"04-deployment.yaml": &bintree{manifests04DeploymentYaml, map[string]*bintree{}},
		"image-references": &bintree{manifestsImageReferences, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

