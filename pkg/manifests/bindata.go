// Code generated by go-bindata.
// sources:
// assets/pod-checkpointer-operator/cluster-role.yaml
// assets/pod-checkpointer-operator/custom-resource.yaml
// assets/pod-checkpointer-operator/daemonset.yaml
// assets/pod-checkpointer-operator/namespace.yaml
// assets/pod-checkpointer-operator/rbac.yaml
// assets/pod-checkpointer-operator/role-binding.yaml
// assets/pod-checkpointer-operator/service-account.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPodCheckpointerOperatorClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\x0a\x02\x31\x0c\x45\xf7\x3d\x45\xc9\x7e\x2a\xb3\xed\xd6\x03\xe8\xca\x7d\x68\x23\x0d\xe3\x24\xa1\x0d\x9e\x5f\xd4\x41\x0a\xee\x3e\xbc\xff\x78\x68\x7c\xa3\x3e\x58\x25\x47\x30\xad\xa9\x34\x2a\x9b\x29\x8b\x53\x4f\x6a\xd4\xd1\xf5\x33\x64\x34\xbe\x7b\x62\x3d\x3d\x57\x7c\x58\xc3\x15\xc2\xc6\x52\x73\x84\xab\xd6\xf3\xa4\x5d\x0e\x0b\xc2\x4e\x8e\x15\x1d\x73\x88\x51\x70\xa7\x6f\x63\x99\x1b\x70\xa0\x61\x58\xde\xfc\x57\x5a\xfe\x9f\xaf\x00\x00\x00\xff\xff\x9a\xcf\x6b\xd9\xad\x00\x00\x00")

func assetsPodCheckpointerOperatorClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorClusterRoleYaml,
		"assets/pod-checkpointer-operator/cluster-role.yaml",
	)
}

func assetsPodCheckpointerOperatorClusterRoleYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/cluster-role.yaml", size: 173, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorCustomResourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\xec\x30\x0c\x45\xf7\xf9\x0a\xff\xc0\xe4\xa9\xbb\xa7\x6c\x87\x1d\x08\x10\x0b\xf6\x26\xf1\x4c\xad\xb6\xb1\x15\xbb\x15\x9f\x8f\x5a\xa6\xa8\x9b\x41\x62\x97\xe8\x9e\x63\xeb\x26\xa8\xfc\x4e\xcd\x58\x6a\x02\x54\xa6\x4f\xa7\xba\xde\x2c\x0e\xff\x2d\xb2\xfc\x5b\xba\x0f\x72\xec\xc2\xc0\xb5\x24\x38\xcf\xe6\x32\xbd\x91\xc9\xdc\x32\x3d\xd0\x85\x2b\x3b\x4b\x0d\x13\x39\x16\x74\x4c\x01\xa0\xe2\x44\x09\x54\x4a\xee\x29\x0f\x2a\x5c\x9d\x9a\x28\x35\x74\x69\x16\x55\x4a\x3c\x26\x71\x8f\xd6\x43\xb5\x9e\x2f\x1e\x59\x6e\x73\x4c\x31\x53\x82\x9f\xe4\xa4\x52\x4e\x47\x3b\x98\x52\x5e\xb7\x5e\x9b\xcc\xba\xad\xfd\xc3\xf4\x55\x04\xf8\xee\xf6\x2a\xe5\x7c\x10\x5f\x6e\xde\x46\x8c\x6c\xfe\xf8\x1b\xf5\xc4\xe6\x1b\xa9\xe3\xdc\x70\xbc\x5f\x7f\x83\x8c\xeb\x75\x1e\xb1\xdd\xc5\x02\x80\x65\x51\x4a\xf0\xbc\x3f\x42\x09\x00\xcb\xfe\x55\x4b\x87\xa3\xf6\xd8\x85\xaf\x00\x00\x00\xff\xff\xbe\x41\xb3\x79\xc0\x01\x00\x00")

func assetsPodCheckpointerOperatorCustomResourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorCustomResourceYaml,
		"assets/pod-checkpointer-operator/custom-resource.yaml",
	)
}

func assetsPodCheckpointerOperatorCustomResourceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorCustomResourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/custom-resource.yaml", size: 448, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x3d\x6f\xdb\x30\x10\xdd\xfd\x2b\x08\xef\x94\x90\xa1\x40\x41\x20\x83\xd1\xa4\x53\xe3\x18\x31\xd2\xb5\xb8\x50\x67\x9b\x30\xc9\x23\xc8\x93\x12\xff\xfb\x42\x92\x6d\x51\xb1\xaa\x2e\xad\x36\xbd\x7b\xef\xf1\xbe\x48\x08\xe6\x27\xc6\x64\xc8\x2b\x01\x21\xa4\xb2\xb9\x5b\x1c\x8d\xaf\x94\x78\x00\x74\xe4\xb7\xc8\x0b\x87\x0c\x15\x30\xa8\x85\x10\x1e\x1c\x2a\x11\xa8\x92\xfa\x80\xfa\x18\xc8\x78\xc6\x78\x0e\xa4\x00\x1a\x95\xa0\x80\x3e\x1d\xcc\x8e\xe5\x04\xcf\xc2\x1b\xda\xd4\x5a\x09\x71\xfc\x9a\x24\x84\x30\xe1\x97\x02\xea\x96\x93\xd0\xa2\x66\x8a\x3d\xdf\x01\xeb\xc3\x8f\xcc\x60\xce\x42\x08\x46\x17\x2c\x30\x9e\xc5\x59\x15\xed\x67\x47\x3e\xf3\x4e\xed\x07\xde\x13\x03\x1b\xf2\x99\x28\xe7\x15\x60\xc3\x01\x0a\x4d\x11\x29\x15\x9a\x5c\x39\x44\x95\x58\x72\xac\x71\xd9\x09\x2f\xc5\x75\x06\xe4\x19\x8c\xc7\x78\x35\x95\x7f\xee\xf1\x45\xe2\x1c\xf8\x6a\x48\x42\x8a\xec\xa4\x0c\x95\xd2\x92\x3e\xca\x9d\xb1\x78\x5f\x36\x10\xcb\x58\xfb\xb2\x85\xca\xcf\xde\x45\x8b\x8e\x94\xc7\xfa\x0d\x35\xf9\x9d\xd9\xdf\x97\xc8\xba\xcc\xd9\xe5\x10\x1c\x69\x06\x8e\xdc\x47\xd0\x28\x03\x46\x43\xd5\xfd\x17\x77\xa5\xa1\x6f\xf2\xbc\xfb\x4a\xd7\xcf\x0f\x8f\xbf\xd6\xab\xa7\xc7\x6b\x44\x88\x06\x6c\x8d\xdf\x23\x39\x95\x81\x42\xec\x0c\xda\xea\x05\x77\x63\xf4\x8c\x6f\x80\x0f\xaa\xeb\x6e\xe1\xa9\xc2\x35\x38\xbc\x39\x6b\xf3\xfc\xf0\xef\x8e\xba\xac\x54\xe1\xe7\x8e\xda\x6e\x56\xdf\xfe\xc3\x79\xdd\x65\xbb\x72\x8d\x83\x3d\x6e\x6a\x6b\x37\x64\x8d\x3e\x29\xb1\xb2\xef\x70\x4a\xd7\x78\x43\xb6\x76\xf8\x44\xb5\xe7\x94\x4f\xc0\xb5\x48\xef\x7e\x33\xe7\x2c\x91\xbe\xa2\xc9\xb9\x7f\x76\x68\x49\xd1\x23\x63\xba\xd1\x23\x6b\x39\x11\x1e\x7b\x9c\x17\xf5\x46\xdc\x40\x94\x03\x9e\x30\x36\x46\xe3\x4a\xeb\x56\xba\x9e\xbb\x31\x07\x4a\xbc\x46\x7e\xa7\x78\x54\xa2\xbd\x85\x67\xbc\xdd\x91\xed\xe8\x7d\xb9\xa0\x32\x92\xc5\x62\xc8\xb4\x30\x54\x3a\x48\x8c\x51\x89\xe5\xf2\x4c\x8d\x98\x18\x22\x4f\xf6\x9b\xc9\x62\x1c\xbf\x15\x52\x1c\xf1\xa4\xfe\x62\x7f\xcd\x82\x42\xab\xa7\xa8\xc4\xe3\x87\x49\x3c\xf4\x0a\x77\x3b\xd4\xac\xc4\x9a\xb6\xfa\x80\x55\x6d\x2f\xd5\xf4\x03\xbe\x79\x45\x26\x46\xd6\xff\x3e\x41\x50\x33\x03\x96\xc6\x4b\x6d\xeb\x2c\x29\x39\x3f\xc4\xb6\xcb\xdd\x04\x33\xd3\x30\xb3\x15\x72\x72\xac\xb3\x3e\xc3\x66\xd4\xa1\x02\xc6\x2d\x47\x60\xdc\x9f\x7a\x6a\x24\x6b\x8d\xdf\xbf\x76\xa1\x8b\xda\xc1\xc7\xab\x87\x06\x8c\x85\x37\x8b\x4a\xdc\x75\x38\x9f\x02\x2a\xf1\x92\x0b\x16\xbf\x03\x00\x00\xff\xff\xca\x6d\xd8\x3e\x09\x07\x00\x00")

func assetsPodCheckpointerOperatorDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorDaemonsetYaml,
		"assets/pod-checkpointer-operator/daemonset.yaml",
	)
}

func assetsPodCheckpointerOperatorDaemonsetYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/daemonset.yaml", size: 1801, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x44\x21\x08\x06\xe0\x9e\x29\x58\xc0\xe2\x5a\x86\xb8\xf2\x7a\xa2\xff\x45\x62\x04\xa2\xe4\xcd\xff\xbe\x65\x3e\x84\xbf\xba\x71\x53\x3b\x48\xd3\x7e\x38\xd7\xc2\x85\x9f\x0f\x6d\x94\x0e\x2d\x15\x62\x76\xdd\x10\x8e\x84\xdf\x69\xff\x6a\x19\xa3\xf5\x89\xbe\x32\xcc\x0b\x87\xde\x00\x00\x00\xff\xff\xb1\x50\xa5\x46\x4c\x00\x00\x00")

func assetsPodCheckpointerOperatorNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorNamespaceYaml,
		"assets/pod-checkpointer-operator/namespace.yaml",
	)
}

func assetsPodCheckpointerOperatorNamespaceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/namespace.yaml", size: 76, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\x03\x31\x0c\x44\xef\xfe\x0a\xb3\xc7\xc2\xba\xe4\x56\xf6\x07\x7a\xef\xa1\x77\xc5\x9e\x34\x22\xb6\x25\x64\xef\x42\xfb\xf5\x25\x9b\x4d\x08\x49\xa1\x37\x8f\x35\xf3\x34\xe8\xc4\x35\x4d\xfe\x43\x32\x1c\x29\x7f\xc2\x1a\x4b\x9d\xbc\xed\x29\x06\x9a\xfb\x51\x8c\x7f\xa8\xb3\xd4\x70\x7a\x6b\x81\xe5\x75\xd9\xed\xd1\x69\xe7\x0a\x3a\x25\xea\x34\x39\xef\x2b\x15\x4c\x5e\x25\x8d\xf1\x88\x78\x52\xe1\xda\x61\xa3\x28\x8c\xba\xd8\xe6\x68\x4a\x11\x93\x17\x45\x6d\x47\x3e\xf4\xf1\x31\xe0\x6c\xce\x68\x93\x1b\x3d\x29\xbf\x9b\xcc\xda\xce\xf4\xf1\x4c\x0e\xf7\xc6\x70\x25\x87\x1b\x2c\xb0\x38\xef\x0d\x4d\x66\x8b\xd8\x72\xc3\xcb\xe0\xbc\x5f\x60\xfb\xbb\x8f\x27\xfa\x30\x3c\x27\x55\x52\x5b\x1f\x0d\xb6\x70\xc4\x45\xa0\xa6\xb5\xc1\x45\xe9\xf9\x58\xad\xa3\xf6\x45\xf2\x5c\x10\x33\x71\xd9\x8c\x0b\xae\xae\x28\xf5\xc0\x5f\x85\xf4\xca\x8b\x86\x75\xf4\x5f\x2d\xd2\x35\xf2\x50\x2c\x41\xb3\x7c\x97\x1b\x3e\x11\x8a\xd4\x86\x4d\x1a\x34\x73\xa4\x9b\x6e\x9d\x3a\x0e\x73\x6e\x7f\xee\xfc\x0d\x00\x00\xff\xff\x17\x48\xf7\x00\xfd\x01\x00\x00")

func assetsPodCheckpointerOperatorRbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRbacYaml,
		"assets/pod-checkpointer-operator/rbac.yaml",
	)
}

func assetsPodCheckpointerOperatorRbacYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/rbac.yaml", size: 509, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x4e\xc5\x30\x0c\x46\xf7\x3c\x45\x5e\x20\x45\x77\x43\xd9\x60\x61\xbf\x48\xec\xae\xe3\x52\xd3\xd6\xb6\x1c\xa7\x03\x4f\x8f\x10\x48\x48\x0c\x88\xe1\xee\xdf\xcf\xd1\xd9\x58\x5a\xcd\x57\xdd\xe9\x91\xa5\xb1\xbc\x26\x30\x7e\x21\xef\xac\x52\xb3\xcf\x80\x13\x8c\x58\xd5\xf9\x1d\x82\x55\xa6\xed\xbe\x4f\xac\x77\xe7\x65\xa6\x80\x4b\x3a\x28\xa0\x41\x40\x4d\x39\x0b\x1c\x54\xb3\x69\x2b\xb8\x12\x6e\xa6\x2c\x41\x5e\xd4\xc8\x21\xd4\xbf\x13\xdd\x00\xa9\x66\x35\x92\xbe\xf2\x12\xe5\x77\x21\xf5\x31\xbf\x11\x46\xaf\xa9\xe4\x2f\xbe\x67\xf2\x93\x91\x1e\x10\x75\x48\xdc\xf0\xca\x75\xa7\x2b\x2d\x9f\xf4\x3f\x26\xfe\xb5\x0f\xc6\x4f\xae\xc3\xfe\x90\x94\x3e\x02\x00\x00\xff\xff\x74\x58\x0e\xcb\x5d\x01\x00\x00")

func assetsPodCheckpointerOperatorRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRoleBindingYaml,
		"assets/pod-checkpointer-operator/role-binding.yaml",
	)
}

func assetsPodCheckpointerOperatorRoleBindingYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/role-binding.yaml", size: 349, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\xb1\x8d\x03\x41\x08\x05\xd0\x7c\xaa\xa0\x81\x09\x2e\x25\xbb\x1a\x2c\x39\x47\xcc\xb7\x16\xad\x16\x10\x83\xb7\x7e\x27\x8e\x9c\xbf\x27\x69\x4f\xd4\xb6\x70\xa6\xfb\x6f\x9c\xe6\x8b\xe9\x81\xba\x4d\xf1\xaf\x1a\x6f\xef\x71\xa1\x65\x49\x0b\x0f\x22\x97\x0b\x4c\x19\x6b\xea\x01\x3d\x33\xcc\x1b\x35\x23\x51\xd2\x51\x5f\xb1\x53\x14\x4c\x91\xf0\x7d\xd8\xab\xe7\x6f\x18\x9f\x00\x00\x00\xff\xff\x5e\xfd\x28\x03\x78\x00\x00\x00")

func assetsPodCheckpointerOperatorServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorServiceAccountYaml,
		"assets/pod-checkpointer-operator/service-account.yaml",
	)
}

func assetsPodCheckpointerOperatorServiceAccountYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/service-account.yaml", size: 120, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/pod-checkpointer-operator/cluster-role.yaml": assetsPodCheckpointerOperatorClusterRoleYaml,
	"assets/pod-checkpointer-operator/custom-resource.yaml": assetsPodCheckpointerOperatorCustomResourceYaml,
	"assets/pod-checkpointer-operator/daemonset.yaml": assetsPodCheckpointerOperatorDaemonsetYaml,
	"assets/pod-checkpointer-operator/namespace.yaml": assetsPodCheckpointerOperatorNamespaceYaml,
	"assets/pod-checkpointer-operator/rbac.yaml": assetsPodCheckpointerOperatorRbacYaml,
	"assets/pod-checkpointer-operator/role-binding.yaml": assetsPodCheckpointerOperatorRoleBindingYaml,
	"assets/pod-checkpointer-operator/service-account.yaml": assetsPodCheckpointerOperatorServiceAccountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"pod-checkpointer-operator": &bintree{nil, map[string]*bintree{
			"cluster-role.yaml": &bintree{assetsPodCheckpointerOperatorClusterRoleYaml, map[string]*bintree{}},
			"custom-resource.yaml": &bintree{assetsPodCheckpointerOperatorCustomResourceYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsPodCheckpointerOperatorDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsPodCheckpointerOperatorNamespaceYaml, map[string]*bintree{}},
			"rbac.yaml": &bintree{assetsPodCheckpointerOperatorRbacYaml, map[string]*bintree{}},
			"role-binding.yaml": &bintree{assetsPodCheckpointerOperatorRoleBindingYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsPodCheckpointerOperatorServiceAccountYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

