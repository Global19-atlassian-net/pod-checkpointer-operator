// Code generated by go-bindata.
// sources:
// assets/pod-checkpointer-operator/cluster-role.yaml
// assets/pod-checkpointer-operator/custom-resource.yaml
// assets/pod-checkpointer-operator/daemonset.yaml
// assets/pod-checkpointer-operator/namespace.yaml
// assets/pod-checkpointer-operator/rbac.yaml
// assets/pod-checkpointer-operator/role-binding.yaml
// assets/pod-checkpointer-operator/service-account.yaml
// manifests/0000_05_pod-checkpointer-operator_00-namespace.yaml
// manifests/0000_05_pod-checkpointer-operator_01-crd.yaml
// manifests/0000_05_pod-checkpointer-operator_02-cr.yaml
// manifests/0000_05_pod-checkpointer-operator_02-rbac.yaml
// manifests/0000_05_pod-checkpointer-operator_02-service-account.yaml
// manifests/0000_05_pod-checkpointer-operator_03-role-binding.yaml
// manifests/0000_05_pod-checkpointer-operator_04-deployment.yaml
// manifests/image-references
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsPodCheckpointerOperatorClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x41\x0a\x02\x31\x0c\x45\xf7\x3d\x45\xc9\x7e\x2a\xb3\xed\xd6\x03\xe8\xca\x7d\x68\x23\x0d\xe3\x24\xa1\x0d\x9e\x5f\xd4\x41\x0a\xee\x3e\xbc\xff\x78\x68\x7c\xa3\x3e\x58\x25\x47\x30\xad\xa9\x34\x2a\x9b\x29\x8b\x53\x4f\x6a\xd4\xd1\xf5\x33\x64\x34\xbe\x7b\x62\x3d\x3d\x57\x7c\x58\xc3\x15\xc2\xc6\x52\x73\x84\xab\xd6\xf3\xa4\x5d\x0e\x0b\xc2\x4e\x8e\x15\x1d\x73\x88\x51\x70\xa7\x6f\x63\x99\x1b\x70\xa0\x61\x58\xde\xfc\x57\x5a\xfe\x9f\xaf\x00\x00\x00\xff\xff\x9a\xcf\x6b\xd9\xad\x00\x00\x00")

func assetsPodCheckpointerOperatorClusterRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorClusterRoleYaml,
		"assets/pod-checkpointer-operator/cluster-role.yaml",
	)
}

func assetsPodCheckpointerOperatorClusterRoleYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/cluster-role.yaml", size: 173, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorCustomResourceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\xec\x30\x0c\x45\xf7\xf9\x0a\xff\xc0\xe4\xa9\xbb\xa7\x6c\x87\x1d\x08\x10\x0b\xf6\x26\xf1\x4c\xad\xb6\xb1\x15\xbb\x15\x9f\x8f\x5a\xa6\xa8\x9b\x41\x62\x97\xe8\x9e\x63\xeb\x26\xa8\xfc\x4e\xcd\x58\x6a\x02\x54\xa6\x4f\xa7\xba\xde\x2c\x0e\xff\x2d\xb2\xfc\x5b\xba\x0f\x72\xec\xc2\xc0\xb5\x24\x38\xcf\xe6\x32\xbd\x91\xc9\xdc\x32\x3d\xd0\x85\x2b\x3b\x4b\x0d\x13\x39\x16\x74\x4c\x01\xa0\xe2\x44\x09\x54\x4a\xee\x29\x0f\x2a\x5c\x9d\x9a\x28\x35\x74\x69\x16\x55\x4a\x3c\x26\x71\x8f\xd6\x43\xb5\x9e\x2f\x1e\x59\x6e\x73\x4c\x31\x53\x82\x9f\xe4\xa4\x52\x4e\x47\x3b\x98\x52\x5e\xb7\x5e\x9b\xcc\xba\xad\xfd\xc3\xf4\x55\x04\xf8\xee\xf6\x2a\xe5\x7c\x10\x5f\x6e\xde\x46\x8c\x6c\xfe\xf8\x1b\xf5\xc4\xe6\x1b\xa9\xe3\xdc\x70\xbc\x5f\x7f\x83\x8c\xeb\x75\x1e\xb1\xdd\xc5\x02\x80\x65\x51\x4a\xf0\xbc\x3f\x42\x09\x00\xcb\xfe\x55\x4b\x87\xa3\xf6\xd8\x85\xaf\x00\x00\x00\xff\xff\xbe\x41\xb3\x79\xc0\x01\x00\x00")

func assetsPodCheckpointerOperatorCustomResourceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorCustomResourceYaml,
		"assets/pod-checkpointer-operator/custom-resource.yaml",
	)
}

func assetsPodCheckpointerOperatorCustomResourceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorCustomResourceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/custom-resource.yaml", size: 448, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorDaemonsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xe2\x30\x10\xbd\xf3\x2b\x2c\xee\x4e\xd4\xc3\x4a\x2b\x4b\x1c\xd0\xb6\x7b\xda\x52\x54\xd4\xbd\xae\xa6\xce\x84\x58\xb1\x3d\x96\x3d\x49\xcb\xbf\x5f\x25\x90\x12\x42\x68\x4f\xf5\x01\x91\x79\xf3\xe6\xcd\x97\x0d\xc1\xfc\xc5\x98\x0c\x79\x25\x20\x84\x94\xb7\x77\x8b\xda\xf8\x42\x89\x7b\x40\x47\x7e\x87\xbc\x70\xc8\x50\x00\x83\x5a\x08\x61\xe1\x15\x6d\xea\xfe\x09\x51\xff\x4c\x12\x42\x50\x22\x50\x21\x75\x85\xba\x0e\x64\x3c\x63\x5c\x08\xe1\xc1\xe1\x4d\x20\x05\xd0\xa8\x04\x05\xf4\xa9\x32\x25\xcb\x2b\xbf\x14\x50\x77\x22\x09\x2d\x6a\xa6\x78\x14\x74\xc0\xba\xfa\x33\xca\xe0\xf3\x1c\x18\x5d\xb0\xc0\x78\x22\x8f\xaa\xe8\x8e\xbd\x88\xf3\x79\xa4\xee\x80\xf7\xc4\xc0\x86\xfc\x88\x34\xf6\xcb\xc0\x86\x0a\x32\x4d\x11\x29\x65\x9a\x5c\x7e\x46\x95\x58\x72\x6c\x70\xd9\x13\x87\xe2\xfa\x00\xe4\x19\x8c\xc7\x38\x0a\x2a\x6f\x77\xef\x43\x97\x9c\x03\x5f\xa8\x91\xa9\xe3\x8d\x14\x27\x88\x94\x75\xf3\x8a\x9a\x7c\x69\xf6\xab\x1c\x59\xe7\xdd\x77\xf4\xc8\x98\xf2\x33\x74\xc5\xfa\xc8\x4f\xc6\xc6\xb3\x71\x28\xd1\x17\xbd\xc0\xaa\xf1\xe6\x5d\xe5\x79\xde\x42\xcc\x63\xe3\x73\x1d\x0d\xf5\x3f\x59\x22\x5d\x5f\x45\xb2\xa4\x6b\x59\x1a\x8b\xab\x0f\x46\x67\xca\xa7\x55\x66\x76\x8e\x7d\xf6\x90\xfb\x08\x1a\x65\xc0\x68\xa8\x58\xfd\x70\x23\x57\xf4\xed\xb4\x23\xc7\x4e\x6e\x9e\xee\x1f\xfe\x6d\xd6\x8f\x0f\x17\xa8\x10\x2d\xd8\x06\x7f\x47\x72\x6a\x02\x08\x51\x1a\xb4\xc5\x33\x96\xd7\xc8\x09\xdb\x02\x57\xaa\x9f\x65\xe6\xa9\xc0\x0d\x38\x9c\xd5\xde\x3e\xdd\x7f\x8f\xf4\xb0\xd0\x99\xff\x4a\x7a\xb7\x5d\xff\xfa\x66\xfd\xfe\x4a\x8f\xfc\x8d\x83\x3d\x6e\x1b\x6b\xb7\x64\x8d\x3e\x28\xb1\xb6\x6f\x70\x48\x23\x8f\x96\x6c\xe3\xf0\x91\x1a\xcf\x69\x3a\x35\xd7\x59\x8f\x2a\x93\x5d\x9d\xa4\x74\xac\x13\x59\xcb\x1b\x2e\x97\xb1\x4e\x8b\x37\x1b\xa4\x85\x7e\xc7\x4f\x58\xc2\xd8\x1a\x8d\x6b\xad\x3b\xfa\x66\xf6\x3e\x4a\x0a\x18\x81\x69\xb8\x98\x15\x25\xde\x20\xbf\x51\xac\x95\xe8\xae\xfb\xc9\xde\xad\xc7\xee\xe2\x21\x1b\xac\x32\x92\xc5\xec\x9c\x7a\x66\x28\x77\x90\x18\xa3\x12\xcb\xe5\xc9\x35\x62\x62\x88\x3c\xdb\x48\x26\xdb\xa5\x70\xf9\x28\x49\x51\xe3\x41\x7d\x21\x30\xea\xc1\x50\x86\x12\x0f\xef\x26\xf1\xb8\x81\x58\x96\xa8\x59\x89\x0d\xed\x74\x85\x45\x63\x87\x9a\x8e\xd3\x9b\x79\xb4\x6e\xce\xa2\xeb\x4e\x3f\x86\x8b\xee\x87\x4f\x87\x2c\x67\x67\xf3\x65\xb4\xf3\x98\x9b\x50\x00\xe3\x8e\x23\x30\xee\x0f\x47\xe7\x48\xd6\x1a\xbf\x7f\xe9\xa1\x81\xef\xe0\xfd\xc5\x43\x0b\xc6\xc2\xab\x45\x25\xee\x7a\x3b\x1f\x02\x2a\xf1\x3c\x26\x2c\xfe\x07\x00\x00\xff\xff\x0b\x17\x7a\x2d\x32\x07\x00\x00")

func assetsPodCheckpointerOperatorDaemonsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorDaemonsetYaml,
		"assets/pod-checkpointer-operator/daemonset.yaml",
	)
}

func assetsPodCheckpointerOperatorDaemonsetYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorDaemonsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/daemonset.yaml", size: 1842, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xb1\x0d\x44\x21\x08\x06\xe0\x9e\x29\x58\xc0\xe2\x5a\x86\xb8\xf2\x7a\xa2\xff\x45\x62\x04\xa2\xe4\xcd\xff\xbe\x65\x3e\x84\xbf\xba\x71\x53\x3b\x48\xd3\x7e\x38\xd7\xc2\x85\x9f\x0f\x6d\x94\x0e\x2d\x15\x62\x76\xdd\x10\x8e\x84\xdf\x69\xff\x6a\x19\xa3\xf5\x89\xbe\x32\xcc\x0b\x87\xde\x00\x00\x00\xff\xff\xb1\x50\xa5\x46\x4c\x00\x00\x00")

func assetsPodCheckpointerOperatorNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorNamespaceYaml,
		"assets/pod-checkpointer-operator/namespace.yaml",
	)
}

func assetsPodCheckpointerOperatorNamespaceYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/namespace.yaml", size: 76, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x6a\x03\x31\x0c\x44\xef\xfe\x0a\xb3\xc7\xc2\xba\xe4\x56\xf6\x07\x7a\xef\xa1\x77\xc5\x9e\x34\x22\xb6\x25\x64\xef\x42\xfb\xf5\x25\x9b\x4d\x08\x49\xa1\x37\x8f\x35\xf3\x34\xe8\xc4\x35\x4d\xfe\x43\x32\x1c\x29\x7f\xc2\x1a\x4b\x9d\xbc\xed\x29\x06\x9a\xfb\x51\x8c\x7f\xa8\xb3\xd4\x70\x7a\x6b\x81\xe5\x75\xd9\xed\xd1\x69\xe7\x0a\x3a\x25\xea\x34\x39\xef\x2b\x15\x4c\x5e\x25\x8d\xf1\x88\x78\x52\xe1\xda\x61\xa3\x28\x8c\xba\xd8\xe6\x68\x4a\x11\x93\x17\x45\x6d\x47\x3e\xf4\xf1\x31\xe0\x6c\xce\x68\x93\x1b\x3d\x29\xbf\x9b\xcc\xda\xce\xf4\xf1\x4c\x0e\xf7\xc6\x70\x25\x87\x1b\x2c\xb0\x38\xef\x0d\x4d\x66\x8b\xd8\x72\xc3\xcb\xe0\xbc\x5f\x60\xfb\xbb\x8f\x27\xfa\x30\x3c\x27\x55\x52\x5b\x1f\x0d\xb6\x70\xc4\x45\xa0\xa6\xb5\xc1\x45\xe9\xf9\x58\xad\xa3\xf6\x45\xf2\x5c\x10\x33\x71\xd9\x8c\x0b\xae\xae\x28\xf5\xc0\x5f\x85\xf4\xca\x8b\x86\x75\xf4\x5f\x2d\xd2\x35\xf2\x50\x2c\x41\xb3\x7c\x97\x1b\x3e\x11\x8a\xd4\x86\x4d\x1a\x34\x73\xa4\x9b\x6e\x9d\x3a\x0e\x73\x6e\x7f\xee\xfc\x0d\x00\x00\xff\xff\x17\x48\xf7\x00\xfd\x01\x00\x00")

func assetsPodCheckpointerOperatorRbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRbacYaml,
		"assets/pod-checkpointer-operator/rbac.yaml",
	)
}

func assetsPodCheckpointerOperatorRbacYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/rbac.yaml", size: 509, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x4e\x03\x41\x0c\x45\xfb\x39\x85\x2f\xb0\x8b\xd2\xa1\xe9\xa0\xa1\x0f\x12\xbd\xd7\xfb\x21\x66\xb3\xf6\xc8\xe3\x89\x04\xa7\x47\x11\x48\x54\xa0\xf4\xd6\x7b\xcf\x7f\x53\x5b\x2b\x1d\xfd\x8c\x47\xb5\x55\xed\xad\x70\xd3\x17\x44\x57\xb7\x4a\xb1\xb0\xcc\x3c\xf2\xe4\xa1\x9f\x9c\xea\x36\x6f\xf7\x7d\x56\xbf\xbb\x1c\x16\x24\x1f\xca\x8e\xe4\x95\x93\x6b\x21\x32\xde\x51\xa9\xf9\x3a\xc9\x09\xb2\x35\x57\x4b\xc4\xe4\x0d\xc1\xe9\xf1\x73\xd1\x1b\x0b\x2a\x6d\x63\xc1\xd4\x3f\x7a\x62\x2f\x7d\x2c\xef\x90\xec\x57\xc8\x44\xdf\x49\xcf\x88\x8b\x0a\x1e\x44\x7c\x58\x16\xa2\x5b\xf8\x7f\x1a\xc2\xcf\x38\xe2\xf5\x2a\xf8\xfd\xf8\xa6\x64\x6e\xfa\x14\x3e\xda\x3f\x63\x94\xaf\x00\x00\x00\xff\xff\x26\x17\x4c\xba\x45\x01\x00\x00")

func assetsPodCheckpointerOperatorRoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorRoleBindingYaml,
		"assets/pod-checkpointer-operator/role-binding.yaml",
	)
}

func assetsPodCheckpointerOperatorRoleBindingYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/role-binding.yaml", size: 325, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsPodCheckpointerOperatorServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\xb1\x8d\x03\x41\x08\x05\xd0\x7c\xaa\xa0\x81\x09\x2e\x25\xbb\x1a\x2c\x39\x47\xcc\xb7\x16\xad\x16\x10\x83\xb7\x7e\x27\x8e\x9c\xbf\x27\x69\x4f\xd4\xb6\x70\xa6\xfb\x6f\x9c\xe6\x8b\xe9\x81\xba\x4d\xf1\xaf\x1a\x6f\xef\x71\xa1\x65\x49\x0b\x0f\x22\x97\x0b\x4c\x19\x6b\xea\x01\x3d\x33\xcc\x1b\x35\x23\x51\xd2\x51\x5f\xb1\x53\x14\x4c\x91\xf0\x7d\xd8\xab\xe7\x6f\x18\x9f\x00\x00\x00\xff\xff\x5e\xfd\x28\x03\x78\x00\x00\x00")

func assetsPodCheckpointerOperatorServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsPodCheckpointerOperatorServiceAccountYaml,
		"assets/pod-checkpointer-operator/service-account.yaml",
	)
}

func assetsPodCheckpointerOperatorServiceAccountYaml() (*asset, error) {
	bytes, err := assetsPodCheckpointerOperatorServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/pod-checkpointer-operator/service-account.yaml", size: 120, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_00NamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8d\x3b\x6e\xc5\x30\x0c\x04\x7b\x9d\x62\xf1\x52\x3b\x9f\x56\x87\x48\x99\x9e\xcf\xda\xc4\x84\x65\x52\x30\x69\x9f\x3f\x70\x10\xb8\xdd\x1d\xcc\xac\x6a\xad\xe2\x53\x36\xc6\x90\x99\x45\x86\x7e\x71\x0f\x75\xab\x38\x3f\xca\xc6\x94\x26\x29\xb5\x00\x26\x1b\x2b\x7c\xd0\x62\xd1\xef\x9c\x86\xb7\x69\x5e\x38\xaf\xc3\xd5\x92\x7b\x01\xba\x3c\xd9\xe3\x82\x81\x17\x04\x13\xa7\xf4\x83\x48\x87\x9c\xae\x0d\x8d\x83\xd6\xd4\x7e\xe0\x86\xf5\x78\x12\xd2\x36\x8d\xab\x87\x5c\x24\xff\x81\xb8\xee\xbb\x04\x19\x1a\x7f\xce\x7b\x7a\x55\x7f\xdb\x0f\x9b\x3a\x4f\xf6\x8a\xc7\xfb\xa3\xfc\x06\x00\x00\xff\xff\x41\x58\x0e\x96\xca\x00\x00\x00")

func manifests0000_05_podCheckpointerOperator_00NamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_00NamespaceYaml,
		"manifests/0000_05_pod-checkpointer-operator_00-namespace.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_00NamespaceYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_00NamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_00-namespace.yaml", size: 202, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_01CrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x4e\xf4\x30\x0c\x84\xef\x79\x0a\xbf\xc0\xe6\x57\x6f\xbf\x72\x5d\x6e\x20\x84\x38\x70\x37\x89\x77\x6b\xb5\x8d\xad\xd8\xa9\x78\x7c\xd4\xc2\xa2\x4a\xcb\x85\x5b\xe2\xcf\x33\xa3\x91\x51\xf9\x8d\x9a\xb1\xd4\x04\xa8\x4c\x1f\x4e\x75\xfb\x59\x9c\xfe\x5b\x64\xf9\xb7\x0e\xef\xe4\x38\x84\x89\x6b\x49\x70\xee\xe6\xb2\xbc\x92\x49\x6f\x99\x1e\xe8\xc2\x95\x9d\xa5\x86\x85\x1c\x0b\x3a\xa6\x00\x50\x71\xa1\x04\x2a\x25\x8f\x94\x27\x15\xae\x4e\xcd\xa2\x4a\x89\xc7\x49\x14\xa5\x86\x2e\xfb\xa3\xda\xc8\x17\x8f\x2c\xdf\x7a\x53\xcc\x94\xe0\x87\x9c\x54\xca\xe9\xa8\x0e\xa6\x94\xb7\xb4\x6b\x93\xae\x7b\xdc\x1f\xdc\x37\x21\xc0\x57\xa7\x17\x29\xe7\xa3\xf1\x46\x66\x36\x7f\xfc\x8d\x3e\xb1\xf9\xbe\xa1\x73\x6f\x38\xdf\xd7\xdc\xa1\x71\xbd\xf6\x19\xdb\x1d\x0e\x00\x96\x45\x29\xc1\xf3\xad\x64\x09\x00\xeb\xed\x04\xeb\x80\xb3\x8e\x38\x84\xcf\x00\x00\x00\xff\xff\x0c\x54\xe4\x6d\x98\x01\x00\x00")

func manifests0000_05_podCheckpointerOperator_01CrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_01CrdYaml,
		"manifests/0000_05_pod-checkpointer-operator_01-crd.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_01CrdYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_01CrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_01-crd.yaml", size: 408, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_02CrYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\xcc\xb1\x0a\xc3\x30\x0c\x04\xd0\xdd\x5f\xa1\x1f\x88\x4b\x56\xaf\xfd\x81\x4e\xdd\x0f\x5b\xc5\x22\x8d\x24\x6c\xd1\xef\x2f\x84\x52\x02\xd9\x0e\xee\xee\xc1\xe5\xc9\x63\x8a\x69\x21\xb7\x96\x6b\xe7\xba\xb9\x89\x06\x8f\x6c\xce\x03\x61\x47\xd0\xd9\xe5\x15\x59\xec\xf6\x59\xf1\xf6\x8e\x35\x6d\xa2\xad\xd0\xc3\xda\xfd\x74\x4a\x3b\x07\x1a\x02\x25\x11\x29\x76\x3e\xdc\xe5\xec\xfe\x8a\xe9\xa8\x5c\xe8\x6f\x2f\x97\xdd\x37\x00\x00\xff\xff\xbc\x8e\x02\x01\x9d\x00\x00\x00")

func manifests0000_05_podCheckpointerOperator_02CrYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_02CrYaml,
		"manifests/0000_05_pod-checkpointer-operator_02-cr.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_02CrYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_02CrYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_02-cr.yaml", size: 157, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_02RbacYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x0a\xe1\xe3\x0f\xd2\x4f\x6e\xc5\x2f\xd0\x7b\x0f\xbd\x6f\xa4\x49\xb3\xc4\xd2\x2e\x2b\xd9\xd0\x3e\x7d\xb1\x49\x13\xd1\xa6\x50\x9f\xbc\xc3\xcc\x37\xbb\xf2\xde\x0f\x17\x2e\x69\x72\x2f\x32\x63\x20\xe5\x57\x58\x65\x29\x93\xb3\x23\xc5\x40\x4b\x3b\x8b\xf1\x07\x35\x96\x12\x2e\x4f\x35\xb0\xfc\x5f\x0f\x47\x34\x3a\x0c\x19\x8d\x12\x35\x9a\x06\xe7\x0a\x65\x4c\x4e\x25\xf9\x78\x46\xbc\xa8\x70\x69\x30\x2f\x0a\xa3\x26\x76\x75\x54\xa5\x88\xc9\x89\xa2\xd4\x33\x9f\x9a\xff\x1e\x18\x6c\x99\x51\x37\xa0\x77\xa4\xfc\x6c\xb2\xe8\x3e\x6e\x9f\xdf\xf8\xa1\xb7\x87\x2f\x7e\xb8\x21\x03\xcb\x6e\x37\x54\x59\x2c\xa2\x4b\x8f\xff\xc6\xfd\x7f\x85\x1d\x7f\xc8\x0f\xfb\xc6\xf1\x37\x96\x4a\xaa\xb7\xa1\xc2\x56\x8e\xb8\x0b\x28\x69\xdf\xf0\xae\xe8\xf6\xac\xb5\xa1\xb4\x55\xe6\x25\x23\xce\xc4\xb9\x0b\xac\xe8\xdd\x51\xca\x89\xdf\x32\x69\xdf\x11\x0d\x57\xcb\xdf\x0f\x20\xbd\x22\x1e\x9c\x90\x08\x59\x4a\x45\xd7\x9b\xa0\xb3\xbc\xe7\xdb\x2e\x0f\x8a\x3e\x03\x00\x00\xff\xff\x86\x12\x70\xb6\x32\x02\x00\x00")

func manifests0000_05_podCheckpointerOperator_02RbacYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_02RbacYaml,
		"manifests/0000_05_pod-checkpointer-operator_02-rbac.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_02RbacYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_02RbacYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_02-rbac.yaml", size: 562, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_02ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\xb1\x8d\x03\x41\x08\x05\xd0\x7c\xaa\xa0\x81\x09\x2e\x25\xbb\x1a\x2c\x39\x47\xcc\xb7\x16\xad\x16\x10\x83\xb7\x7e\x27\x8e\x9c\xbf\x27\x69\x4f\xd4\xb6\x70\xa6\xfb\x6f\x9c\xe6\x8b\xe9\x81\xba\x4d\xf1\xaf\x1a\x6f\xef\x71\xa1\x65\x49\x0b\x0f\x22\x97\x0b\x4c\x19\x6b\xea\x01\x3d\x33\xcc\x1b\x35\x23\x51\xd2\x51\x5f\xb1\x53\x14\x4c\x91\xf0\x7d\xd8\xab\xe7\x6f\x18\x9f\x00\x00\x00\xff\xff\x5e\xfd\x28\x03\x78\x00\x00\x00")

func manifests0000_05_podCheckpointerOperator_02ServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_02ServiceAccountYaml,
		"manifests/0000_05_pod-checkpointer-operator_02-service-account.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_02ServiceAccountYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_02ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_02-service-account.yaml", size: 120, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_03RoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x31\x4e\xc4\x40\x0c\x45\xfb\x39\x85\x2f\x90\xa0\xed\xd0\x74\xd0\xd0\x2f\x12\xbd\xe3\xf1\x12\x93\x5d\xdb\xf2\x78\xb6\xe0\xf4\x28\x02\x09\x89\x02\xa5\xb7\xff\xfb\xff\x6d\xa2\xad\xc2\xd9\xae\xfc\x2c\xda\x44\xdf\x0b\xba\xbc\x71\x74\x31\xad\x10\x0b\xd2\x8c\x23\x57\x0b\xf9\xc4\x14\xd3\x79\x7b\xec\xb3\xd8\xc3\xfd\xb4\x70\xe2\xa9\xdc\x38\xb1\x61\x62\x2d\x00\x8a\x37\xae\xe0\xd6\x26\x5a\x99\x36\x37\xd1\xe4\x98\xcc\x39\x30\x2d\x7e\x2e\xba\x23\x71\x05\x73\xd6\xbe\xca\x25\xa7\xbf\x0f\xa5\x8f\xe5\x83\x29\xfb\x9e\x39\xc1\x77\xc3\x57\x8e\xbb\x10\x3f\x11\xd9\xd0\x2c\x00\x47\x70\x47\x81\x61\x57\x3e\xf3\x65\xe7\xfd\xfa\x38\x34\x08\x5d\x5e\xc2\x86\xff\xa3\xaa\x7c\x05\x00\x00\xff\xff\x33\xb4\x5b\x00\x63\x01\x00\x00")

func manifests0000_05_podCheckpointerOperator_03RoleBindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_03RoleBindingYaml,
		"manifests/0000_05_pod-checkpointer-operator_03-role-binding.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_03RoleBindingYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_03RoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_03-role-binding.yaml", size: 355, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifests0000_05_podCheckpointerOperator_04DeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xcd\x8e\x9b\x30\x10\xbe\xf3\x14\xa3\xdc\x49\xb2\x97\x1e\x7c\x43\xdb\x54\x3d\xb4\x59\x94\xac\xda\x63\x35\x6b\x86\x62\xc5\xf6\x58\xf6\x90\x36\x6f\x5f\xb1\x01\x04\x74\x57\x0b\x27\xe4\x6f\xe6\xfb\x33\x60\x30\x3f\x28\x26\xc3\x5e\x01\x86\x90\x76\xd7\x87\xec\x62\x7c\xa5\xe0\x33\x05\xcb\x37\x47\x5e\x32\x47\x82\x15\x0a\xaa\x0c\xc0\xa3\x23\x05\x81\xab\x5c\x37\xa4\x2f\x81\x8d\x17\x8a\x39\x07\x8a\x28\x1c\xfb\x89\x14\x50\x93\x02\x0e\xe4\x53\x63\x6a\xc9\x97\x0b\x59\x0a\xa4\x3b\xbe\x48\xc1\x1a\x8d\x49\xc1\x43\x06\x90\xc8\x92\x16\x8e\x1d\x02\xe0\x50\x74\xf3\x0d\x5f\xc8\xa6\xfb\xc1\x1a\xf9\x61\xea\x63\x0b\x00\x42\x2e\x58\x14\xea\xe5\x26\x31\xbb\xc7\xce\x94\xd7\x6a\xaf\x57\x07\x18\x4a\x78\x7d\xa7\x78\x35\x9a\x0a\xad\xb9\xf5\x72\x5c\x97\x93\x2b\x3a\xcf\x2a\x1b\x4e\xf3\xc8\x96\xb6\x97\xf6\x85\xa2\x27\xa1\xb4\x35\xbc\x73\x98\x84\xa2\x82\xcd\xa6\x1f\x15\xb6\x1d\x9d\x61\x3f\x49\x99\xc3\x85\x6e\xea\x03\x92\x71\x1a\x60\xb0\xa4\xe0\xf0\xd7\x24\x49\x13\x88\xea\x9a\xb4\x28\x38\xf2\x59\x37\x54\xb5\x96\x7a\x50\xb3\x17\x34\x9e\xe2\x4c\x77\x6d\xbf\x00\xc6\xe1\xef\x69\xbb\xbb\x77\x97\x54\x77\xbd\x49\x26\xbb\x81\xa3\x4c\x64\xef\xd2\xa3\xa1\x92\xa3\x28\xf8\xb4\xdf\xef\xf7\xb3\x91\xe1\xf6\x1d\x49\x34\x7a\x1a\x52\xb3\x73\xe8\xab\x25\xe3\xea\x18\x65\x6b\x6d\xc9\xd6\xe8\x9b\x82\xc2\xfe\xc1\xdb\xac\x41\x7f\x5d\x12\xdf\x7d\xfc\x2c\x9e\x1f\xbf\xfe\x3a\x16\xdf\x0f\xe7\xb2\x78\x3c\x2c\xbc\x5e\xd1\xb6\xf4\x25\xb2\x53\x0b\x00\xa0\x36\x64\xab\x13\xd5\xff\x23\x3d\x56\xa2\x34\x6a\xfc\x17\xb6\xe3\xc7\xfc\xa6\x8d\xa7\xf2\x70\x2a\x9e\x9f\x4e\xaf\x4e\xde\x32\xa1\x60\xf3\x6e\x13\x9b\xec\x5f\x00\x00\x00\xff\xff\xb6\xbe\x10\x04\x7e\x04\x00\x00")

func manifests0000_05_podCheckpointerOperator_04DeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_manifests0000_05_podCheckpointerOperator_04DeploymentYaml,
		"manifests/0000_05_pod-checkpointer-operator_04-deployment.yaml",
	)
}

func manifests0000_05_podCheckpointerOperator_04DeploymentYaml() (*asset, error) {
	bytes, err := manifests0000_05_podCheckpointerOperator_04DeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/0000_05_pod-checkpointer-operator_04-deployment.yaml", size: 1150, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _manifestsImageReferences = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\xb1\xca\xc3\x30\x0c\x84\x77\x3f\xc5\xe1\x3d\x09\xff\xea\xf9\x5f\x3a\x17\xba\x0b\x47\x49\x44\x6a\xcb\xc8\xa2\xcf\x5f\x92\x94\x6e\x9d\xee\xb8\x83\xef\xdb\xa5\xce\x09\xb7\x42\x2b\xdf\xdd\x98\x4a\xa0\x26\x0f\xb6\x2e\x5a\x13\xe4\xd8\x47\x6d\x5c\xfb\x26\x8b\x8f\xa2\xd3\xeb\x2f\xf4\xc6\x39\x05\xc0\x69\xed\x47\x0e\xa8\x54\x38\xa1\xe9\x3c\xe4\x8d\xf3\xde\x54\xaa\xb3\x0d\xda\xd8\xc8\xd5\x02\x00\x2c\xa6\x25\x9d\x0d\xb8\xac\xf1\x5f\xf3\xce\x76\xca\xe3\xe7\xb9\x48\xf1\xab\x9c\x7e\x42\xd3\x93\x9c\xbb\xc7\xf0\x0e\x00\x00\xff\xff\xc4\xbd\x7f\x85\xc3\x00\x00\x00")

func manifestsImageReferencesBytes() ([]byte, error) {
	return bindataRead(
		_manifestsImageReferences,
		"manifests/image-references",
	)
}

func manifestsImageReferences() (*asset, error) {
	bytes, err := manifestsImageReferencesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "manifests/image-references", size: 195, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/pod-checkpointer-operator/cluster-role.yaml": assetsPodCheckpointerOperatorClusterRoleYaml,
	"assets/pod-checkpointer-operator/custom-resource.yaml": assetsPodCheckpointerOperatorCustomResourceYaml,
	"assets/pod-checkpointer-operator/daemonset.yaml": assetsPodCheckpointerOperatorDaemonsetYaml,
	"assets/pod-checkpointer-operator/namespace.yaml": assetsPodCheckpointerOperatorNamespaceYaml,
	"assets/pod-checkpointer-operator/rbac.yaml": assetsPodCheckpointerOperatorRbacYaml,
	"assets/pod-checkpointer-operator/role-binding.yaml": assetsPodCheckpointerOperatorRoleBindingYaml,
	"assets/pod-checkpointer-operator/service-account.yaml": assetsPodCheckpointerOperatorServiceAccountYaml,
	"manifests/0000_05_pod-checkpointer-operator_00-namespace.yaml": manifests0000_05_podCheckpointerOperator_00NamespaceYaml,
	"manifests/0000_05_pod-checkpointer-operator_01-crd.yaml": manifests0000_05_podCheckpointerOperator_01CrdYaml,
	"manifests/0000_05_pod-checkpointer-operator_02-cr.yaml": manifests0000_05_podCheckpointerOperator_02CrYaml,
	"manifests/0000_05_pod-checkpointer-operator_02-rbac.yaml": manifests0000_05_podCheckpointerOperator_02RbacYaml,
	"manifests/0000_05_pod-checkpointer-operator_02-service-account.yaml": manifests0000_05_podCheckpointerOperator_02ServiceAccountYaml,
	"manifests/0000_05_pod-checkpointer-operator_03-role-binding.yaml": manifests0000_05_podCheckpointerOperator_03RoleBindingYaml,
	"manifests/0000_05_pod-checkpointer-operator_04-deployment.yaml": manifests0000_05_podCheckpointerOperator_04DeploymentYaml,
	"manifests/image-references": manifestsImageReferences,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"pod-checkpointer-operator": &bintree{nil, map[string]*bintree{
			"cluster-role.yaml": &bintree{assetsPodCheckpointerOperatorClusterRoleYaml, map[string]*bintree{}},
			"custom-resource.yaml": &bintree{assetsPodCheckpointerOperatorCustomResourceYaml, map[string]*bintree{}},
			"daemonset.yaml": &bintree{assetsPodCheckpointerOperatorDaemonsetYaml, map[string]*bintree{}},
			"namespace.yaml": &bintree{assetsPodCheckpointerOperatorNamespaceYaml, map[string]*bintree{}},
			"rbac.yaml": &bintree{assetsPodCheckpointerOperatorRbacYaml, map[string]*bintree{}},
			"role-binding.yaml": &bintree{assetsPodCheckpointerOperatorRoleBindingYaml, map[string]*bintree{}},
			"service-account.yaml": &bintree{assetsPodCheckpointerOperatorServiceAccountYaml, map[string]*bintree{}},
		}},
	}},
	"manifests": &bintree{nil, map[string]*bintree{
		"0000_05_pod-checkpointer-operator_00-namespace.yaml": &bintree{manifests0000_05_podCheckpointerOperator_00NamespaceYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_01-crd.yaml": &bintree{manifests0000_05_podCheckpointerOperator_01CrdYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_02-cr.yaml": &bintree{manifests0000_05_podCheckpointerOperator_02CrYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_02-rbac.yaml": &bintree{manifests0000_05_podCheckpointerOperator_02RbacYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_02-service-account.yaml": &bintree{manifests0000_05_podCheckpointerOperator_02ServiceAccountYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_03-role-binding.yaml": &bintree{manifests0000_05_podCheckpointerOperator_03RoleBindingYaml, map[string]*bintree{}},
		"0000_05_pod-checkpointer-operator_04-deployment.yaml": &bintree{manifests0000_05_podCheckpointerOperator_04DeploymentYaml, map[string]*bintree{}},
		"image-references": &bintree{manifestsImageReferences, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

